package com.yuyh.compiler;

import com.google.auto.service.AutoService;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import com.yuyh.annotation.InjectView;

import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.PackageElement;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.util.Elements;
import javax.tools.Diagnostic;

@AutoService(Processor.class) // 向javac注册我们这个自定义的注解处理器，这样，在javac编译时，才会调用到我们这个自定义的注解处理器方法。
public class InjectViewProcessor extends AbstractProcessor {

    private Filer mFiler;
    private Messager mMessager;
    private Elements mElementUtils;

    // 类 -- 注解多个属性
    private Map<TypeElement, List<InjectViewInfo>> target = new LinkedHashMap<>();

    /**
     * 编译期间，自动被注解处理工具调用
     *
     * @param processingEnv 可获取 Elements , Types , Filer 等相关参数
     */
    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);

        mFiler = processingEnv.getFiler();
        mMessager = processingEnv.getMessager();
        mElementUtils = processingEnv.getElementUtils();
    }

    @Override
    public Set<String> getSupportedAnnotationTypes() {
        Set<String> annotations = new LinkedHashSet<>();
        annotations.add(InjectView.class.getCanonicalName());
        return annotations;
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.RELEASE_7;
    }

    /**
     * @param annotations getSupportedAnnotationTypes() 中指定的 "目标注解" 类型
     * @param roundEnv    Annotation Processor扫描出的结果
     * @return
     */
    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {

        target.clear();

        Set<? extends Element> injectViewElements = roundEnv.getElementsAnnotatedWith(InjectView.class);

        for (Element element : injectViewElements) {
            // 1.获取包名
            PackageElement packageElement = mElementUtils.getPackageOf(element);
            String packageName = packageElement.getQualifiedName().toString();
            print(String.format("package = %s", packageName));

            // 2.获取包装类类型
            TypeElement typeElement = (TypeElement) element.getEnclosingElement();
            final String enclosingName = typeElement.getQualifiedName().toString();
            print(String.format("enclosingName = %s", enclosingName));

            // 3. 获取属性类型
            TypeMirror fieldType = element.asType();
            String fieldClassType = fieldType.toString();
            print(String.format("fieldClassType = %s", fieldClassType));

            // 4. 获取属性名称
            String fieldName = element.getSimpleName().toString();
            print(String.format("fieldName = %s", fieldName));

            InjectView injectView = element.getAnnotation(InjectView.class);
            int id = injectView.value();
            print(String.format("id = %d", id));

            List<InjectViewInfo> list = target.get(typeElement);
            if (list == null) {
                list = new ArrayList<>();
                target.put(typeElement, list);
            }

            InjectViewInfo info = new InjectViewInfo(id, fieldName, fieldType);
            list.add(info);
        }

        generateCode();

        return true;
    }

    private void generateCode() {

        for (Map.Entry<TypeElement, List<InjectViewInfo>> item : target.entrySet()) {

            List<InjectViewInfo> list = item.getValue();
            if (list == null || list.size() == 0) {
                continue;
            }

            TypeElement typeElement = item.getKey();

            String packageName = getPackageName(typeElement);
            ClassName typeClassName = ClassName.bestGuess(getClassName(typeElement, packageName));

            TypeSpec.Builder typeSpecBuilder = TypeSpec.classBuilder(typeElement.getSimpleName() + "$$ViewInjector")
                    .addJavadoc("DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY ProcessorDemo.")
                    .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                    .addSuperinterface(ParameterizedTypeName.get(ClassName.get("com.yuyh.inject", "ViewInjector"), ClassName.get(typeElement)));

            MethodSpec.Builder methodSpecBuilder = MethodSpec.methodBuilder("inject")
                    .addAnnotation(Override.class)
                    .addModifiers(Modifier.PUBLIC)
                    .returns(TypeName.VOID)
                    .addParameter(ClassName.get(typeElement), "host")
                    .addParameter(Object.class, "obj");

            methodSpecBuilder.addCode("if(obj instanceof android.app.Activity) {\n");
            for (InjectViewInfo info : list) {

                String fieldClassName = info.getType().toString();
                ClassName viewClass = ClassName.bestGuess(fieldClassName);

                methodSpecBuilder.addStatement("\thost.$L = ($T)((android.app.Activity) obj).findViewById($L)", info.getName(), viewClass, info.getId());
            }
            methodSpecBuilder.addCode("} else if(obj instanceof android.view.View) {\n");
            for (InjectViewInfo info : list) {

                String fieldClassName = info.getType().toString();
                ClassName viewClass = ClassName.bestGuess(fieldClassName);

                methodSpecBuilder.addStatement("\thost.$L = ($T)((android.view.View) obj).findViewById($L)", info.getName(), viewClass, info.getId());
            }
            methodSpecBuilder.addCode("}\n");

            typeSpecBuilder.addMethod(methodSpecBuilder.build());

            JavaFile javaFile = JavaFile.builder(packageName, typeSpecBuilder.build())
                    .build();

            try {
                javaFile.writeTo(mFiler);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void print(String msg) {
        mMessager.printMessage(Diagnostic.Kind.NOTE, msg);
    }

    private void print(String format, Object... args) {
        mMessager.printMessage(Diagnostic.Kind.NOTE, String.format(format, args));
    }

    private String getPackageName(TypeElement type) {
        return mElementUtils.getPackageOf(type).getQualifiedName().toString();
    }

    private static String getClassName(TypeElement type, String packageName) {
        int packageLen = packageName.length() + 1;
        return type.getQualifiedName().toString().substring(packageLen).replace('.', '$');
    }
}